{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] is the IPv6 localhost address.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV===\"production\"&&\"serviceWorker\"in navigator){// The URL constructor is available in all browsers that support SW.\n//@ts-ignore\nvar publicUrl=new URL(process.env.PUBLIC_URL||\"\",window.location);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service \"+\"worker. To learn more, visit https://goo.gl/SC7cgQ\");});}else{// Is not local host. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log(\"New content is available; please refresh.\");// Execute callback\nif(config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log(\"Content is cached for offline use.\");// Execute callback\nif(config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error(\"Error during service worker registration:\",error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nif(response.status===404||response.headers.get(\"content-type\").indexOf(\"javascript\")===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\");});}export function unregister(){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"sources":["C:/Users/admin/Downloads/react-express-starter-master/src/serviceWorker.ts"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config: any) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\t//@ts-ignore\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL || \"\", window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(\n\tswUrl: any,\n\tconfig: {\n\t\tonUpdate: (arg0: ServiceWorkerRegistration) => void;\n\t\tonSuccess: (arg0: ServiceWorkerRegistration) => void;\n\t}\n) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker!.onstatechange = () => {\n\t\t\t\t\tif (installingWorker!.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log(\"New content is available; please refresh.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(\n\tswUrl: URL | RequestInfo,\n\tconfig: {\n\t\tonUpdate: (arg0: ServiceWorkerRegistration) => void;\n\t\tonSuccess: (arg0: ServiceWorkerRegistration) => void;\n\t}\n) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}