{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nvar isLocalhost = Boolean(window.location.hostname === \"localhost\" ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" ||\n// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    //@ts-ignore\n    var publicUrl = new URL(process.env.PUBLIC_URL || \"\", window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener(\"load\", function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(function () {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://goo.gl/SC7cgQ\");\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log(\"New content is available; please refresh.\");\n\n            // Execute callback\n            if (config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"sources":["C:/Users/admin/Downloads/react-express-starter-master/src/serviceWorker.ts"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config: any) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\t//@ts-ignore\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL || \"\", window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(\n\tswUrl: any,\n\tconfig: {\n\t\tonUpdate: (arg0: ServiceWorkerRegistration) => void;\n\t\tonSuccess: (arg0: ServiceWorkerRegistration) => void;\n\t}\n) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker!.onstatechange = () => {\n\t\t\t\t\tif (installingWorker!.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log(\"New content is available; please refresh.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(\n\tswUrl: URL | RequestInfo,\n\tconfig: {\n\t\tonUpdate: (arg0: ServiceWorkerRegistration) => void;\n\t\tonSuccess: (arg0: ServiceWorkerRegistration) => void;\n\t}\n) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}